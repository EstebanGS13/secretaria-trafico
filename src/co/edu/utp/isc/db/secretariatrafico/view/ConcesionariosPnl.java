package co.edu.utp.isc.db.secretariatrafico.view;

import co.edu.utp.isc.db.secretariatrafico.controller.JpaController;
import co.edu.utp.isc.db.secretariatrafico.model.Ciudades;
import co.edu.utp.isc.db.secretariatrafico.model.Concesionarios;
import co.edu.utp.isc.db.secretariatrafico.model.Marcas;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Esteban
 */
public class ConcesionariosPnl extends javax.swing.JPanel implements Crud {

    /**
     * Creates new form ConcesionariosPnl
     */
    public ConcesionariosPnl() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        chkAI = new javax.swing.JCheckBox();
        txtDireccion = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cmbMarca = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        cmbCiudad = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Concesionarios", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        setPreferredSize(new java.awt.Dimension(1024, 210));

        jLabel10.setText("Dirección:");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel11.setText("Ciudad:");

        jLabel1.setText("ID concesionario:");

        chkAI.setPreferredSize(new java.awt.Dimension(24, 26));
        chkAI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAIActionPerformed(evt);
            }
        });

        jLabel2.setText("AI");

        jLabel13.setText("Teléfono:");

        jLabel14.setText("Marca:");

        jLabel9.setText("Nombre:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkAI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbCiudad, 0, 343, Short.MAX_VALUE)
                    .addComponent(txtId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNombre)
                    .addComponent(cmbMarca, 0, 344, Short.MAX_VALUE)
                    .addComponent(txtTelefono))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2))
                            .addComponent(chkAI, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(cmbCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(cmbMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(45, 45, 45))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chkAIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAIActionPerformed
        if (chkAI.isSelected()) {
            txtId.setText("");
            txtId.setEnabled(false);
        } else {
            txtId.setEnabled(true);
        }
    }//GEN-LAST:event_chkAIActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkAI;
    private javax.swing.JComboBox<String> cmbCiudad;
    private javax.swing.JComboBox<String> cmbMarca;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel modelo = null;
    private Concesionarios conceseionario = new Concesionarios();
    private Ciudades c = new Ciudades();
    private Marcas m = new Marcas();
    private List<Concesionarios> listaConcesionarios;
    private List<Ciudades> listaCiudades;
    private List<Marcas> listaMarcas;        
    
    @Override
    public void cargarListas() {
        this.listaConcesionarios = JpaController.getInstance().getConcesionariosControlador().findConcesionariosEntities();
        this.listaCiudades = JpaController.getInstance().getCiudadesControlador().findCiudadesEntities();
        this.listaMarcas = JpaController.getInstance().getMarcasControlador().findMarcasEntities();
    }

    @Override
    public DefaultTableModel getModelo() {
        if (modelo == null) {
            try {
                modelo = (new DefaultTableModel(
                        null, new String[]{
                            "ID Concesionario", "Nombre", "Dirección",
                            "Teléfono", "Ciudad", "Marca"}) {
                    Class[] types = new Class[]{
                        java.lang.String.class,
                        java.lang.String.class,
                        java.lang.String.class,
                        java.lang.String.class,
                        java.lang.String.class,
                        java.lang.String.class
                    };
                    boolean[] canEdit = new boolean[]{
                        false, false, false, false, false, false
                    };

                    @Override
                    public Class getColumnClass(int columnIndex) {
                        return types[columnIndex];
                    }

                    @Override
                    public boolean isCellEditable(int rowIndex, int colIndex) {
                        return canEdit[colIndex];
                    }
                });
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
        return modelo;
    }

    @Override
    public void cargarRegistros() {
        try {
            for (Ciudades ciudad : listaCiudades) {
                cmbCiudad.addItem(ciudad.getNombreCiudad());
            }
            cmbCiudad.setSelectedIndex(-1);
            for (Marcas marca : listaMarcas) {
                cmbMarca.addItem(marca.getNombreMarca());
            }
            cmbMarca.setSelectedIndex(-1);
            modelo.setRowCount(0);
            for (Concesionarios co : listaConcesionarios) {
                modelo.addRow(new Object[]{
                    co.getIdConcesionario(),
                    co.getNombreConcesionario(),
                    co.getDireccionConcesionario(),
                    co.getTelefonoConcesionario(),
                    co.getIdCiudad().getNombreCiudad(),
                    co.getIdMarca().getNombreMarca()
                });
            }
        } catch (Exception e) {
        }
    }

    @Override
    public void registrar() {
        conceseionario.setNombreConcesionario(txtNombre.getText().trim());
        conceseionario.setDireccionConcesionario(txtDireccion.getText().trim());
        conceseionario.setTelefonoConcesionario(txtTelefono.getText().trim());
        
        for (Ciudades ciudad : listaCiudades) {
            if (ciudad.getNombreCiudad().equals(cmbCiudad.getSelectedItem().toString())) {
                conceseionario.setIdCiudad(ciudad);
            }
        }
        
        for (Marcas marca : listaMarcas) {
            if (marca.getNombreMarca().equals(cmbMarca.getSelectedItem().toString())) {
                conceseionario.setIdMarca(marca);
            }
        }
    }

    @Override
    public void guardar() {
        try {
            if (txtId.getText().isEmpty()) {
                conceseionario.setIdConcesionario(null);
            } else {
                conceseionario.setIdConcesionario(Integer.parseInt(txtId.getText().trim()));
            }
            
            registrar();
            
            JpaController.getInstance().getConcesionariosControlador().create(conceseionario);
            JOptionPane.showMessageDialog(null, "Registro guardado");
            limpiarCampos();
            recargar();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    @Override
    public void seleccionar(JTable tblTabla) {
        chkAI.setEnabled(false);
        txtId.setText(tblTabla.getValueAt(tblTabla.getSelectedRow(), 0).toString());
        txtNombre.setText(tblTabla.getValueAt(tblTabla.getSelectedRow(), 1).toString());
        txtDireccion.setText(tblTabla.getValueAt(tblTabla.getSelectedRow(), 2).toString());
        txtTelefono.setText(tblTabla.getValueAt(tblTabla.getSelectedRow(), 3).toString());
        cmbCiudad.setSelectedItem(tblTabla.getValueAt(tblTabla.getSelectedRow(), 4).toString());
        cmbMarca.setSelectedItem(tblTabla.getValueAt(tblTabla.getSelectedRow(), 5).toString());
    }
    
    @Override
    public void actualizar() {
        try {
            conceseionario.setIdConcesionario(Integer.parseInt(txtId.getText().trim()));
            
            registrar();

            JpaController.getInstance().getConcesionariosControlador().edit(conceseionario);
            JOptionPane.showMessageDialog(null, "Registro actualizado");
            limpiarCampos();
            recargar();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    @Override
    public void limpiarCampos() {
        chkAI.setEnabled(true);
        chkAI.setSelected(false);
        txtId.setEnabled(true);
        txtId.setText("");
        txtNombre.setText("");
        txtDireccion.setText("");
        cmbCiudad.setSelectedIndex(-1);
        cmbMarca.setSelectedIndex(-1);
    }

    @Override
    public void eliminar(JTable tblTabla) {
        int id = (int) tblTabla.getValueAt(tblTabla.getSelectedRow(), 0);
        try {
            JpaController.getInstance().getConcesionariosControlador().destroy(id);
            JOptionPane.showMessageDialog(null, "Registro eliminado");
            recargar();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    @Override
    public void recargar() {
        cargarListas();
        cargarRegistros();
    }
}
